import:
    - tilt.yaml
settings:
    areas:
        - &scene1      white                    # map background
        - &water1      [0.870, 0.870, 0.870]    # water wave
        - &water2      [0.760, 0.760, 0.760]    # water wave
        - &water3      [0.5, 0.5, 0.5]          # playa texture
        - &water1_o    '#fff'                   # water stroke (ocean coastline)
        - &water2_o    '#d1d1d1'                # water stroke 2 (streams, lake outlines)
        - &earth1      white                    # land color
        - &earth2      '#e9e4e0'                # urban
        - &earth2_v    false                    # urban
        - &green1      [0.50,0.50,0.50]         # park
        - &green1_r    '#bbbbbb'                # park roads
        - &green1_b    [.65, .65, .65]          # park buildings
        - &green1_bo   [.8, .8, .8]             # park building outlines
        - &green2      [0.90,0.90,0.90]         # cemetery
        - &green3      '#9a9a9a'                # golf course
        - &green4      [0.90,0.90,0.90]         # farm faint
        - &green4_v    false                    # farm faint
        - &green5      [0.75,0.75,0.75]         # farm
        - &green6      [0.40,0.40,0.40]         # nature reserve
        - &green7      [0.85,0.85,0.85]         # forest
        - &green8      [0.80,0.80,0.80]         # conservation
        - &green9      [0.85,0.85,0.85]         # forest (landcover)
        - &green9_e    [0.90,0.90,0.90]         # forest (landcover) early
        - &green9_v    true                     # forest (landcover) visibility
        - &green10     [0.85,0.85,0.85]         # sports_centre
        - &green11     [0.85,0.85,0.85]         # minor zoo related AOIs
        - &green11_o   [0.85,0.85,0.85]         # minor zoo related AOIs outline
        - &orange1     '#aaaaaa'                # stadium
        - &orange2     [0.40,0.40,0.40]         # pitch (play field)
        - &brown1      '#7b7b7b'                # university
        - &brown1_r    '#bbbbbb'                # university roads
        - &brown1_b    [.65, .65, .65]          # university buildings
        - &brown1_bo   [.8, .8, .8]             # university building outlines
        - &brown2      '#aaaaaa'                # school
        - &brown3      [0.40,0.40,0.40]         # playground
        - &red1        '#a2a2a2'                # hospital
        - &red1_r      '#bbbbbb'                # hospital roads
        - &red1_b      [.65, .65, .65]          # hospital buildings
        - &red1_bo     [.8, .8, .8]             # hospital building outlines
        - &grey1       '#cccccc'                # pedestrian, retail, airport apron, parking, church
        - &grey1_e     '#dad6d4'                # pedestrian, retail, airport apron, parking, church early zoom 14
        - &grey1_v     true                     # pedestrian, retail, airport apron, parking, church
        - &grey2       [0.5, 0.5, 0.5]          # airport runway
        - &grey3       '#bbbbbb'                # railway
        - &grey4       '#ffc52a'                # airport taxiway
        - &grey5       '#ffc52a'                # airport taxiway
        - &grey6       '#dddddd'                # industrial
        - &grey6_b     [.65, .65, .65]          # industrial buildings
        - &grey6_bo    [.8, .8, .8]             # industrial building outlines
        - &grey7       '#ecebe9'                # pedestrian, match minor road / path color
        - &grey7_v     true                     # pedestrian visibility
        - &grey8       '#ecebe9'                # winter sports
        - &grey8_v     true                     # winter sports visibility
        - &grey9       [.7, .0, .0, 0.5]        #[.7, .7, .7]        # transit platform
        - &grey9_o     [.5, .5, .5]             # transit platform outline
        - &grey9_v     true                     # transit platform visibility
        - &grey10      '#d4cce6'                # generic major landuse (theme park, resort, aquarium, winery)
        - &grey10_o    '#bcb9c5'                # generic major landuse outline
        - &grey11      '#d7d7d7'                # generic minor landuse (attraction, artwork)
        - &grey11_o    '#cccccc'                # generic minor landuse outline
        - &grey12      '#cfcfcf'                # generic minor amusements (roller coasters, rides, slide, carousel)
        - &grey12_o    '#c5c5c5'                # generic minor amusements
        - &purple      '#f0e1e1'                # airport
        - &purple_v    false                    # airport
        - &mystry1     '#aaaaaa'                # recreation ground (type of park, sometimes around reservoirs)
        - &building1   white                    # building
        - &building2   white                    # building stroke
        - &building_o  25                       # building stroke order
        - &building_e  true                     # building stroke order

styles:
    space-tile:
        mix: tilt
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }
                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    space-constant:
        shaders:
            blocks:
                global: |
                    // Get the constant coordinates (glitches on zooms)
                    // ================================
                    vec2 getConstantCoords () {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                        const float pixel_scale = 695.;
                        float meter_pixels = u_meters_per_pixel / u_device_pixel_ratio;
                        vec2 st = gl_FragCoord.xy/pixel_scale;
                        const float dot_wrap = 1000.;
                        st += mod(u_map_position.xy / meter_pixels, dot_wrap)/pixel_scale;
                        return st;
                        #else
                        return vec2(0.0,0.0);
                        #endif
                    }
#    TILING functions
    tiling-tile:
        shaders:
            blocks:
                global: |
                    // Repeats a coordinate space (st) in diferent tiles
                    // ================================
                    vec2 tile(vec2 st, float zoom){
                        st *= zoom;
                        return fract(st);
                    }
    tiling-brick:
        shaders:
            blocks:
                global: |
                    // Repeats a coordinate space (st) in diferent brick-like tiles
                    // ================================
                    vec2 brick(vec2 st, float zoom){
                        st *= zoom;
                        // Here is where the offset is happening
                        st.x += step(1., mod(st.y, 2.0)) * 0.5;
                        return fract(st);
                    }
    tiling-mirror:
        shaders:
            blocks:
                global: |
                    // Mirror the coordinate space
                    // ================================
                    vec2 mirror(vec2 _st, vec2 _zoom){
                        _st *= _zoom;
                        if (fract(_st.y * 0.5) > 0.5){
                            _st.x = _st.x + 0.5;
                            _st.y = 1.0 - _st.y;
                        }
                        return fract(_st);
                    }
#    Usefull functions
    functions-aastep:
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                global: |
                    // AntiAliased Step function
                    //=============================
                    float aastep(float threshold, float value) {
                        #ifdef TANGRAM_FRAGMENT_SHADER
                            #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                                float afwidth = length(vec2(dFdx(value), dFdy(value))) * 0.70710678118654757;
                                return smoothstep(threshold-afwidth, threshold+afwidth, value);
                            #else
                                return step(threshold, value);
                            #endif
                        #else
                            return step(threshold, value);
                        #endif
                    }
#    Generative functions
    generative-random:
        shaders:
            blocks:
                global: |
                    // 1D Random for 1 and 2 dimentions
                    // ================================
                    float random(float x) { return fract(sin(x)*43758.5453);}
                    float random(vec2 p) { return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }
                    float random(vec3 p) { return fract(sin(dot(p.xyz, vec3(70.9898,78.233,32.4355)))* 43758.5453123); }
                    //
                    // 2D Random for 2 dimentions
                    // ================================
                    vec2 random2 (vec2 xy) { return fract(sin(vec2(dot(xy,vec2(127.1,311.7)),dot(xy,vec2(269.5,183.3))))*43758.5453); }
                    //
                    // 3D Random for 2 dimentions
                    // ================================
                    vec3 random3 (vec2 xy) { return fract(sin(vec3( dot(xy,vec2(127.1,311.7)), dot(xy,vec2(269.5,183.3)), dot(xy,vec2(419.2,371.9)) ))*43758.5453); }
                    vec3 random3 (vec3 c) {
                        float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
                        vec3 r;
                        r.z = fract(512.0*j);
                        j *= .125;
                        r.x = fract(512.0*j);
                        j *= .125;
                        r.y = fract(512.0*j);
                        return r-0.5;
                    }
#    Drawing Shapes functions
    shapes-circle:
        mix: functions-aastep
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // get distance field of a Circle
                    // ================================
                    float circleDF (vec2 st) {
                        return dot(st,st);
                    }
                    //
                    // Draw a circle in the middle of the ST space
                    // ================================
                    float circle (vec2 st, float radius) {
                        return 1.-aastep(radius, circleDF(st-vec2(0.5))*PI);
                    }
    shapes-rect:
        shaders:
            blocks:
                global: |
                    // get distance field of a rectangle in the center
                    // ================================
                    float rectDF(vec2 st, vec2 size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }
                    float rectDF(vec2 st, float size) {
                        //float aspect = u_resolution.x/u_resolution.y;
                        st = st*2.-1.;
                        //st.x *= aspect;
                        return length(max(abs(st)-size,.0));
                    }

                    // Draw a round corners rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size, float radio) {
                        radio = max(.000001, radio);
                        return 1.0-step(radio, rectDF(st, size-radio));
                    }

                    float rect(vec2 st, float size, float radio) {
                        return rect(st,vec2(size),radio);
                    }

                    // Draw a rectangle in the center
                    // ================================
                    float rect(vec2 st, vec2 size){
                        size = .25-size*.125;
                        vec2 uv = step(size,st*(1.0-st));
                        return (uv.x*uv.y);
                    }

                    float rect(vec2 st, float size){
                        return rect(st,vec2(size));
                    }
#    Patterns compositions functions
    patterns-stripes:
        mix: [functions-aastep, tilt]
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    // Return a distance function of stripes
                    float stripesDF (vec2 st) {
                        return abs(sin(st.y*PI));
                    }

                    // Adjustable width stripes
                    float stripes (vec2 st, float width) {
                        return aastep(width,stripesDF(st));
                    }

                    // Faster optimisation of diagonal stripes
                    float diagonalStripes (vec2 st) {
                        vec2 i_st = floor(st);
                        vec2 f_st = fract(st);
                        if (mod(i_st.y,2.) - mod(i_st.x,2.) == 0.) {
                            return 1.0 - aastep(f_st.x,f_st.y);
                        } else {
                            return aastep(f_st.x,f_st.y);
                        }
                    }
    patterns-dots:
        mix: [space-tile, tiling-brick, shapes-circle]
        shaders:
            blocks:
                global: |
                    // Interpolated dot patern between zooms attached to tile coords
                    float TileDots(float scale, float size) {
                        // Beginning of the transition
                        vec2 IN = brick(getTileCoords()*scale,2.);
                        float A = circleDF(vec2(0.5)-IN)*1.8;
                        //
                        // If over 18. add an end B to transition with
                        float d = 0.0;
                        if (u_map_position.z < 18.) {
                            vec2 OUT = fract(getTileCoords()*scale*2.);
                            float B = circleDF(vec2(0.25)-OUT)*5.;
                            B = min(B, circleDF(vec2(0.75,0.25)-OUT)*5.);
                            B = min(B, circleDF(vec2(0.5,0.75)-OUT)*5.);
                            B = min(B, circleDF(vec2(0.,0.75)-OUT)*5.);
                            B = min(B, circleDF(vec2(1.,0.75)-OUT)*5.);
                            d = mix(A, B, pow(fract(u_map_position.z),10.));
                        } else {
                            d = A;
                        }
                        //
                        // Use the antialias step to make a shape from the DF
                        return aastep(size,d);;
                    }
##### ACTUAL STYLES
    dashedline:
        base: lines
        mix: tiling-mirror
        lighting: false # ignore lights
        texcoords: true
        shaders:
            blocks:
                global: |
                    float stripes(vec2 st){
                        st = st * 10.;
                        return step(.5, 1.0 - smoothstep(.3, 1., abs(sin(st.y * 3.14159))));
                    }
                color: |
                    vec2 st = v_texcoord;
                    vec4 foreground = vec4(0.850,0.850,0.850,1.0);
                    color = mix(v_color, foreground, stripes(st));
    water-gradient:
        base: polygons
        shaders:
            blocks:
                filter: |
                    color.rgb = mix(vec3(1.0), vec3(0.970), gl_FragCoord.x / u_resolution.x + gl_FragCoord.y / u_resolution.y);
    pixel-pattern-light:
        mix: [space-tile, generative-random]
        base: polygons
        shaders:
            blocks:
                filter: |
                    vec3 pos = vec3(getTileCoords()*130.0,1.0);
                    color.rgb = vec3(random(abs(floor(pos)))+0.785);
    pixel-pattern-bright:
        mix: [space-tile, generative-random]
        base: polygons
        shaders:
            blocks:
                filter: |
                    vec3 pos = vec3(getTileCoords()*180.0,1.0);
                    color.rgb = vec3(random(abs(floor(pos)))+0.855);
    pixel-pattern-dark:
        mix: [space-tile, generative-random]
        base: polygons
        shaders:
            blocks:
                filter: |
                    vec3 pos = vec3(getTileCoords()*280.0,1.0);
                    color.rgb = vec3(random(abs(floor(pos)))+0.695);
    waves:
        base: polygons
        mix: [space-constant, patterns-stripes]
        blend: inlay
        shaders:
            defines:
                COLOR1: vec3(0.915)
                COLOR2: vec3(0.950)
            blocks:
                global: |
                    float stripes2(vec2 st){
                        return step(.3,1.0-smoothstep(.5,1.,abs(sin(st.y*3.14159265358))));
                    }
                filter: |
                    vec2 st = getConstantCoords();
                    const float wave_width = 30.0;
                    const float wave_height = .01;
                    st.y += sin(st.x*wave_width)*wave_height;
                    // gradient
                    color.rgb = mix(COLOR1, color.rgb, gl_FragCoord.x / u_resolution.x);
                    color = mix(color,vec4(COLOR2,1.0),stripes(st*92.,.5))*1.0;
                    color = vec4(color.rgb, 0.5);
    waves2:
        base: polygons
        mix: waves
        shaders:
            defines:
                COLOR1: vec3(0.840)
                COLOR2: vec3(0.910)


    stream-waves:
        base: lines
        mix: waves
        shaders:
            defines:
                COLOR1: vec3(0.910)
                COLOR2: vec3(0.980)

    dots:
        mix: [space-tile, tiling-tile, shapes-circle]
        base: polygons
        blend: inlay
        shaders:
            defines:
                PATTERN_SCALE: 50.0
                DOT_SIZE: .1
                COLOR1: vec4(1.00,1.00,1.00, 1)
                COLOR2: color.rgb
            blocks:
                color: |
                    vec2 st = getTileCoords();
                    st = tile(st,PATTERN_SCALE);
                    float dot_size = DOT_SIZE;
                    float b = circle(st, dot_size);
                    color *= vec4(b);
                filter: |
                    color.rgb = mix(COLOR1, COLOR2, b);
                    color = vec4(color.rgb, 0.5);
    dots-medium:
        mix: dots
        base: polygons
        shaders:
            defines:
                PATTERN_SCALE: 60.0
                DOT_SIZE: .25
    dots3:
        mix: dots
        base: polygons
        shaders:
            defines:
                PATTERN_SCALE: 70.0
                DOT_SIZE: .125

    park-dots1:
        mix: dots
        shaders:
            defines:
                COLOR1: vec3(1.00,1.00,1.00)
                COLOR2: color.rgb

    medium-dots:
        mix: dots-medium
        shaders:
            defines:
                COLOR1: vec3(1.00,1.00,1.00)
                COLOR2: color.rgb

    tiny-dots:
        mix: dots3
        shaders:
            defines:
                COLOR1: vec3(1.00,1.00,1.00)
                COLOR2: color.rgb

    park-dots3:
        mix: dots
        shaders:
            defines:
                COLOR1: vec3(1.00,1.00,1.00)
                COLOR2: vec3(0.760,0.760,0.760)

    dots-rev:
        base: polygons
        mix: patterns-dots
        shaders:
            blocks:
                color: |
                    color.rgb = mix(vec3(1.000), color.rgb, TileDots(35.0, 0.31));

    sand:
        base: polygons
        mix: [generative-random, space-tile]
        animated: false
        shaders:
            blocks:
                color: |
                    // vec2 st = getTileCoords()*2.;
                    vec2 st = floor(getTileCoords()*250.);
                    color.rgb = mix(vec3(0.75), vec3(1.0), smoothstep(0.048,0.120, random(st)));

layers:
    landuse:
        data: { source: osm }
        draw:
            park-dots1:
                order: function() { return feature.sort_key; }
                visible: false
            medium-dots:
                order: function() { return feature.sort_key; }
                visible: false
            horizontal-bars:
                order: function() { return feature.sort_key; }
                visible: false
            horizontal-bars-rev:
                order: function() { return feature.sort_key; }
                visible: false
            dots-rev:
                order: function() { return feature.sort_key; }
                visible: false
            pixel-pattern-light:
                order: function() { return feature.sort_key; }
                visible: false
            pixel-pattern-bright:
                order: function() { return feature.sort_key; }
                visible: false
            pixel-pattern-dark:
                order: function() { return feature.sort_key; }
                visible: false
            polygons:
                order: function() { return feature.sort_key; }
        tier1:
            filter:
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: { min: 3 },  area: { min: 300000000 } }
                    - { $zoom: { min: 4 },  area: { min: 300000000 } }
                    - { $zoom: { min: 5 },  area: { min: 150000000 } }
                    - { $zoom: { min: 6 },  area: { min: 150000000 } }
                    - { $zoom: { min: 7 },  area: { min: 100000000 } }
                    - { $zoom: { min: 8 },  area: { min: 10000000 } }
                    - { $zoom: { min: 9 },  area: { min: 5000000 } }
                    - { $zoom: { min: 10 }, area: { min: 1000000 } }
                    - { $zoom: { min: 11 }, area: { min: 500000 } }
                    - { $zoom: { min: 12 }, area: { min: 500000 } }
                    - { $zoom: { min: 13 }, area: { min: 100000 } }
                    - { $zoom: { min: 14 }, area: { min: 50000 } }
                    - { $zoom: { min: 15 }, area: { min: 20000 } }
                    - { $zoom: { min: 15 }, area: { min: 2000 } }
                    - { $zoom: { min: 16 } }
            national_park:
                filter: { kind: [national_park, "park or protected land"], not: { operator: [ "United States Forest Service", "US Forest Service", "U.S. Forest Service", "USDA Forest Service" ] } }
                draw:
                    park-dots1:
                        interactive: true
                        color: [0.790,0.790,0.790]
                        # todo: what is this?
                        order: 18
                        visible: true
                us_national_park:
                    # yosemite national park, death valley national park, grand canyon national park
                    filter: { operator: [ "United States National Park Service", "US National Park Service" ] }
                    draw:
                        pixel-pattern-light:
                            visible: true

        tier2:
            filter:
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: { min: 4 },  area: { min: 1000000000 } }
                    - { $zoom: { min: 5 },  area: { min: 1000000000 } }
                    - { $zoom: { min: 6 },  area: { min: 150000000 } }
                    - { $zoom: { min: 7 },  area: { min: 100000000 } }
                    - { $zoom: { min: 8 },  area: { min: 10000000 } }
                    - { $zoom: { min: 9 },  area: { min: 5000000 } }
                    - { $zoom: { min: 10 }, area: { min: 1000000 } }
                    - { $zoom: { min: 11 }, area: { min: 500000 } }
                    - { $zoom: { min: 12 }, area: { min: 250000 } }
                    - { $zoom: { min: 13 }, area: { min: 100000 } }
                    - { $zoom: { min: 14 }, area: { min: 50000 } }
                    - { $zoom: { min: 15 }, area: { min: 20000 } }
                    - { $zoom: { min: 15 }, area: { min: 2000 } }
                    - { $zoom: { min: 16 } }
            conservation:
                filter:
                    kind: [conservation, protected_area, nature_reserve]
                    $zoom: { min: 4 }
                draw:
                    polygons:
                        color: [1.00,1.00,1.00]
                        visible: true
                wilderness-areas:
                    filter: function() { return feature.name && feature.name.indexOf("Wilderness") > -1 }
                    draw:
                        pixel-pattern-light:
                            order: 25
                            visible: true

                national_forest_level_6:
                    filter: { protect_class: ["6",6] }
                    draw:
                        park-dots1:
                            color: [0.810,0.810,0.810] #*green7
                            visible: true

            # gotta be a protected area to draw green, not just a landcover type
            farm:
                filter:
                    kind: [farm, farmland]
                    $zoom: { min: 10}
                draw:
                    polygons:
                        color: [1.00,1.00,1.00]
                        visible: *green4_v
            forest:
                filter: { kind: [forest,wood], $zoom: { min: 6 } }
                national-forest:
                    filter:
                        operator: [ "United States Forest Service", "US Forest Service", "U.S. Forest Service", "USDA Forest Service" ]
                    draw:
                        pixel-pattern-bright:
                            color: *green7
                            visible: true

                landuse-forest:
                    filter:
                        not: { operator: [ "United States Forest Service", "US Forest Service", "U.S. Forest Service", "USDA Forest Service" ] }
                        $zoom: { min: 6 }
                    draw:
                        pixel-pattern-bright:
                            color: [0.890,0.890,0.890]
                            visible: true

            nature_reserve:
                filter: { kind: nature_reserve, $zoom: { min: 7 } }
                draw:
                    pixel-pattern-light:
                        order: function() { return feature.sort_key; }
                wilderness-areas:
                    filter: function() { return feature.name && feature.name.indexOf("Wilderness") > -1 }
                    draw:
                        pixel-pattern-light:
                            color: [1.0,1.0,1.0]
                        outline:
                            style: lines
                            color: *green6
                            width: [[9,0px],[10,2px],[12,4px]]

            parks-and-national-forests-not-national-park:
                filter: { $zoom: { min: 4 }, kind: [park, national_park, "park or protected land"], not: { operator: [ "United States National Park Service", "US National Park Service" ] } }
                # default for national forests and more?
                draw:
                    park-dots1:
                        color: [0.760,0.760,0.760]
                        visible: true
            urban:
                filter: { kind: [urban, rural, residential] }
                visible: *earth2_v
                draw:
                    polygons:
                        color: [1.00,1.00,1.00]
                        visible: *earth2_v
        tier3:
            filter:
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: { min: 8 },  area: { min: 10000000 } }
                    - { $zoom: { min: 9 },  area: { min: 5000000 } }
                    - { $zoom: { min: 10 }, area: { min: 1000000 } }
                    - { $zoom: { min: 11 }, area: { min: 500000 } }
                    - { $zoom: { min: 12 }, area: { min: 500000 } }
                    - { $zoom: { min: 13 }, area: { min: 100000 } }
                    - { $zoom: { min: 14 }, area: { min: 50000 } }
                    - { $zoom: { min: 15 }, area: { min: 20000 } }
                    - { $zoom: { min: 15 }, area: { min: 2000 } }
                    - { $zoom: { min: 16 } }
            airport:
                filter:
                    kind: aerodrome
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: *purple_v
            military:
                filter:
                    kind: military
                draw:
                    polygons:
                        color: [1.0,1.0,1.0]
                        visible: true
            university:
                filter:
                    kind: [university, college]
                draw:
                    dots-rev:
                        color: [0.945,0.945,0.945]
                        visible: true
    water:
        data: { source: osm, layer: water }
        draw:
            waves:
                interactive: true
                order: function() { return feature.sort_key; }
                color: [1, 0.880, 0.880]
        later:
            filter: { $zoom: { min: 12 } }
            draw:
                waves2:
                    color: [0.780, 0.780, 0.780]
                    order: function() { return feature.sort_key + 1; }

        lakes:
            filter:
                all:
                    - kind: [ocean, lake, water, riverbank, reservoir, swimming_pool]
                any:
                    # limit show smaller landuse areas to higher zooms
                    - { $zoom: { min: 1 },  area: { min: 40000000000 } }
                    - { $zoom: { min: 2 },  area: { min: 20000000000 } }
                    # some weird natural earth scale set transition
                    - { $zoom: { min: 3 },  area: { min: 80000000000 } }
                    - { $zoom: { min: 4 },  area: { min: 5000000000 } }
                    - { $zoom: { min: 5 },  area: { min: 700000000 } }
                    - { $zoom: { min: 6 },  area: { min: 500000000 } }
                    - { $zoom: { min: 7 },  area: { min: 160000000 } }
                    - { $zoom: { min: 8 },  area: { min: 40000000 } }
                    - { $zoom: { min: 9 },  area: { min: 10000000 } }
                    - { $zoom: { min: 10 }, area: { min: 8000000 } }
                    - { $zoom: { min: 11 }, area: { min: 2000000 } }
                    - { $zoom: { min: 12 }, area: { min: 200000 } }
                    - { $zoom: { min: 13 }, area: { min: 100000 } }
                    - { $zoom: { min: 14 }, area: { min: 2000 } }
                    - { $zoom: { min: 15 } }
            draw:
                waves:
                    color: [0.880, 0.880, 0.880]

        river:
            #river center lines, not boundaries for polygons
            filter: { kind: [river,canal,stream,dam,ditch,drain], $zoom: { min: 14 }, not: { is_tunnel: true } }
            draw:
                stream-waves:
                    order: function() { return feature.sort_key; }
                    interactive: true
                    color: [0.840,0.840,0.840]
                    width: [[14,0.5px],[15,2.0px],[17,6.0px],[18,8.0px]]
                    cap: round
